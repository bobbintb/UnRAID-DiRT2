Menu="dirtSettings:3"
Title="DataTables"
---
<link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/2.3.4/css/dataTables.dataTables.css">

<table id="filesTable" class="display" style="width:100%">
    <thead>
        <tr>
            <th>Inode</th>
            <th>Path</th>
            <th>Shares</th>
            <th>Size</th>
            <th>Links</th>
            <th>Accessed</th>
            <th>Modified</th>
            <th>Changed</th>
            <th>Hash</th>
        </tr>
    </thead>
    <tbody>
    </tbody>
</table>

<script src="https://cdn.datatables.net/2.3.4/js/dataTables.js"></script>

<script>
$(function() {
    let socket;
    let table;

    const getEntityId = (entity) => {
        if (!entity) return null;
        const symbol = Object.getOwnPropertySymbols(entity).find(s => s.description === 'entityId');
        return symbol ? entity[symbol] : null;
    };

    function connect() {
      socket = new WebSocket(`ws://${window.location.hostname}:41820?clientId=dirt-datatables.page`);

      socket.onopen = function() {
        console.log("DataTables Tab: WebSocket connection established.");
        dirtySock('getAllFiles', null);
      };

      socket.onmessage = function(event) {
        const parsedMessage = JSON.parse(event.data);
        const { action, data } = parsedMessage;

        if (action === 'allFiles') {
          console.log("DataTables Tab: Received allFiles data.");
          if (table) {
            table.destroy();
          }
          table = $('#filesTable').DataTable({
              data: data,
              columns: [
                  { data: null, render: (data, type, row) => getEntityId(row) },
                  { data: 'path', render: (data) => Array.isArray(data) ? data.join('<br>') : data },
                  { data: 'shares', render: (data) => Array.isArray(data) ? data.join('<br>') : data },
                  { data: 'size' },
                  { data: 'nlink' },
                  { data: 'atime', render: (data) => data ? new Date(data).toLocaleString() : '' },
                  { data: 'mtime', render: (data) => data ? new Date(data).toLocaleString() : '' },
                  { data: 'ctime', render: (data) => data ? new Date(data).toLocaleString() : '' },
                  { data: 'hash', defaultContent: '<i>N/A</i>' }
              ]
          });
        }
      };

      socket.onclose = function(event) {
        console.log("DataTables Tab: WebSocket connection closed. Reconnecting...");
        setTimeout(connect, 1000);
      };

      socket.onerror = function(error) {
        console.error("DataTables Tab: WebSocket error: ", error);
        socket.close();
      };
    }

    function dirtySock(action, data) {
        const message = {
          clientId: "dirt-datatables.page",
          action: action,
          data: data
        };
        if (socket && socket.readyState === WebSocket.OPEN) {
          socket.send(JSON.stringify(message));
        } else {
          console.error("DataTables Tab: WebSocket is not connected.");
        }
    }

    connect();
});
</script>
