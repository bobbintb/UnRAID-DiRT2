Menu="dirtSettings:3"
Title="DataTables"
---
<link rel="stylesheet" href="https://cdn.datatables.net/2.3.4/css/dataTables.dataTables.min.css">
<script src="https://cdn.datatables.net/2.3.4/js/dataTables.min.js"></script>

<style>
    .group-row {
        background-color: #f0f0f0;
        font-weight: bold;
        cursor: pointer;
    }
    .group-row:hover {
        background-color: #e0e0e0;
    }
    .child-row {
        padding-left: 30px;
    }
    table.dataTable tbody tr.group-row td {
        border-bottom: 2px solid #ddd;
    }
    .toggle-icon {
        margin-right: 5px;
        display: inline-block;
        width: 10px;
    }
</style>

<table id="duplicatesTableElement" class="display" style="width:100%">
    <thead>
        <tr>
            <th>File/Group</th>
            <th>Size</th>
            <th>Accessed</th>
            <th>Modified</th>
            <th>Changed</th>
        </tr>
    </thead>
    <tbody>
    </tbody>
</table>

<script>
document.addEventListener('DOMContentLoaded', function() {
    let socket;
    let table;
    let duplicateData = [];

    function formatBytes(bytes, decimals = 2) {
        if (bytes === 0) return '0 Bytes';
        const k = 1024;
        const dm = decimals < 0 ? 0 : decimals;
        const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
    }

    function formatDate(timestamp) {
        return timestamp ? new Date(timestamp).toLocaleString() : '';
    }

    // Convert grouped data to flat rows for DataTables
    function convertDataForDataTables(groups) {
        const rows = [];
        groups.forEach(group => {
            // Add parent row
            rows.push({
                isGroup: true,
                hash: group.hash,
                count: group.count,
                totalSize: group.totalSize,
                path: `Group: ${group.hash}`,
                size: group.totalSize,
                atime: '',
                mtime: '',
                ctime: '',
                groupHash: group.hash,
                expanded: true
            });
            // Add child rows
            group.files.forEach(file => {
                rows.push({
                    isGroup: false,
                    path: file.path,
                    size: file.size,
                    atime: file.atime,
                    mtime: file.mtime,
                    ctime: file.ctime,
                    groupHash: group.hash
                });
            });
        });
        return rows;
    }

    // Initialize DataTables
    table = new DataTable('#duplicatesTableElement', {
        data: [],
        columns: [
            {
                data: 'path',
                render: function(data, type, row) {
                    if (type === 'display') {
                        if (row.isGroup) {
                            return `<span class="toggle-icon">▼</span><strong>${data}</strong> <span>(${row.count} files, ${formatBytes(row.totalSize)})</span>`;
                        } else {
                            return `<span style="margin-left: 30px;">${data}</span>`;
                        }
                    }
                    return data;
                }
            },
            {
                data: 'size',
                render: function(data, type, row) {
                    if (type === 'display' && !row.isGroup) {
                        return formatBytes(data);
                    }
                    return row.isGroup ? '' : data;
                }
            },
            {
                data: 'atime',
                render: function(data, type, row) {
                    return type === 'display' ? formatDate(data) : data;
                }
            },
            {
                data: 'mtime',
                render: function(data, type, row) {
                    return type === 'display' ? formatDate(data) : data;
                }
            },
            {
                data: 'ctime',
                render: function(data, type, row) {
                    return type === 'display' ? formatDate(data) : data;
                }
            }
        ],
        paging: false,
        searching: true,
        ordering: false,
        info: false,
        language: {
            emptyTable: "No duplicate files found"
        },
        createdRow: function(row, data, dataIndex) {
            if (data.isGroup) {
                row.classList.add('group-row');
                row.setAttribute('data-group-hash', data.groupHash);
            } else {
                row.classList.add('child-row');
                row.setAttribute('data-parent-hash', data.groupHash);
            }
        }
    });

    // Handle group row clicks to toggle child visibility
    document.querySelector('#duplicatesTableElement tbody').addEventListener('click', function(e) {
        const groupRow = e.target.closest('tr.group-row');
        if (!groupRow) return;

        const groupHash = groupRow.getAttribute('data-group-hash');
        const childRows = document.querySelectorAll(`tr.child-row[data-parent-hash="${groupHash}"]`);
        const toggleIcon = groupRow.querySelector('.toggle-icon');

        childRows.forEach(row => {
            row.style.display = row.style.display === 'none' ? '' : 'none';
        });

        // Toggle icon
        const isVisible = childRows[0] && childRows[0].style.display !== 'none';
        if (toggleIcon) {
            toggleIcon.textContent = isVisible ? '▼' : '▶';
        }
    });

    function connect() {
        socket = new WebSocket(`ws://${window.location.hostname}:41820?clientId=dirt-tabulator.page`);

        socket.onopen = function() {
            console.log("DataTables Tab: WebSocket connection established.");
            dirtySock('findDuplicates', null);
        };

        socket.onmessage = function(event) {
            const parsedMessage = JSON.parse(event.data);
            const { action, data } = parsedMessage;

            if (action === 'duplicateFiles') {
                console.log("DataTables Tab: Received duplicateFiles data.");
                duplicateData = data;
                const tableData = convertDataForDataTables(data);
                table.clear();
                table.rows.add(tableData);
                table.draw();
            }
        };

        socket.onclose = function(event) {
            console.log("DataTables Tab: WebSocket connection closed. Reconnecting...");
            setTimeout(connect, 1000);
        };

        socket.onerror = function(error) {
            console.error("DataTables Tab: WebSocket error: ", error);
            socket.close();
        };
    }

    function dirtySock(action, data) {
        const message = {
            clientId: "dirt-tabulator.page",
            action: action,
            data: data
        };
        if (socket && socket.readyState === WebSocket.OPEN) {
            socket.send(JSON.stringify(message));
        } else {
            console.error("DataTables Tab: WebSocket is not connected.");
        }
    }

    connect();
});
</script>
