Menu="dirtSettings:3"
Title="DataTables"
---
<link rel="stylesheet" href="https://cdn.datatables.net/2.3.4/css/dataTables.dataTables.min.css">
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
<script src="https://cdn.datatables.net/2.3.4/js/dataTables.min.js"></script>
<script src="https://unpkg.com/split.js/dist/split.min.js"></script>

<style>
    /* Basic styling for the split layout */
    .split-container {
        display: flex;
        flex-direction: row;
        height: calc(100vh - 200px); /* Adjust for Unraid header/footer */
        width: 100%;
    }
    .split {
        padding: 10px;
        box-sizing: border-box;
        overflow: auto;
    }
    .gutter {
        background-color: #f7f7f7;
        background-repeat: no-repeat;
        background-position: 50%;
    }
    .gutter.gutter-horizontal {
        cursor: col-resize;
        width: 10px;
    }
    tr.group {
        cursor: pointer;
    }
</style>

<div class="split-container">
    <div id="left-pane" class="split">
        <table id="datatables-table" class="display" style="width:100%"></table>
    </div>
    <div id="right-pane" class="split">
        <!-- Right table will go here -->
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    Split(['#left-pane', '#right-pane'], {
        sizes: [70, 30],
        minSize: [300, 150],
        gutterSize: 10,
        cursor: 'col-resize',
    });

    // --- WebSocket and Table Implementation ---
    let socket;
    let table;

    function formatBytes(bytes, decimals = 2) {
        if (!bytes || bytes === 0) return '0 Bytes';
        const k = 1024;
        const dm = decimals < 0 ? 0 : decimals;
        const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
    }

    function formatDate(timestamp) {
        if (!timestamp) return '';
        return new Date(timestamp).toLocaleString();
    }


    function connect() {
        socket = new WebSocket(`ws://${window.location.hostname}:41820?clientId=dirt-datatables.page`);

        socket.onopen = function() {
            console.log("DataTables Tab: WebSocket connection established.");
            dirtySock('findDuplicates', null);
        };

        socket.onmessage = function(event) {
            const parsedMessage = JSON.parse(event.data);
            const { action, data } = parsedMessage;

            if (action === 'duplicateFiles') {
                console.log("DataTables Tab: Received duplicateFiles data package.");
                const { duplicates } = data;

                const flatData = duplicates.flatMap(group =>
                    group.files.map(file => ({
                        ...file,
                        hash: group.hash // Add group hash to each file
                    }))
                );

                initializeTable(flatData);
            }
        };

        socket.onclose = function(event) {
            console.log("DataTables Tab: WebSocket connection closed. Reconnecting...");
            setTimeout(connect, 1000);
        };

        socket.onerror = function(error) {
            console.error("DataTables Tab: WebSocket error: ", error);
            socket.close();
        };
    }

    function initializeTable(data) {
        if ($.fn.DataTable.isDataTable('#datatables-table')) {
            $('#datatables-table').DataTable().destroy();
            $('#datatables-table tbody').empty(); // Clear tbody to remove old event listeners
        }

        table = new DataTable('#datatables-table', {
            data: data,
            paging: false,
            searching: false,
            info: false,
            autoWidth: false,
            language: {
                emptyTable: "No duplicate files found."
            },
            columns: [
                { data: 'hash' }, // The grouping column
                { data: 'path', title: 'Path' },
                { data: 'size', title: 'Size', render: (d, t, r) => t === 'display' ? formatBytes(d) : d },
                { data: 'mtime', title: 'Modified', render: (d, t, r) => t === 'display' ? formatDate(d) : d }
            ],
            columnDefs: [
                { visible: false, targets: 0 } // Hide the grouping column
            ],
            order: [[0, 'asc']], // Order by the grouping column
            drawCallback: function(settings) {
                const api = this.api();
                const rows = api.rows({ page: 'current' }).nodes();
                let last = null;

                api.column(0, { page: 'current' }).data().each(function(group, i) {
                    if (last !== group) {
                        const groupRow = $('<tr class="group" style="background-color: #f0f0f0; font-weight: bold; color: black;"><td colspan="3"><span class="toggle-icon">▼</span> ' + group + '</td></tr>');
                        $(rows).eq(i).before(groupRow);
                        last = group;
                    }
                });
            }
        });

        $('#datatables-table tbody').on('click', 'tr.group', function () {
            const $this = $(this);
            const icon = $this.find('.toggle-icon');
            let nextUntil = $this.nextUntil('tr.group');

            // Toggle visibility of the child rows
            nextUntil.toggle();

            // Update the icon
            if (nextUntil.is(':visible')) {
                icon.text('▼');
            } else {
                icon.text('▶');
            }
        });
    }

    function dirtySock(action, data) {
        const message = {
            clientId: "dirt-datatables.page",
            action: action,
            data: data
        };
        if (socket && socket.readyState === WebSocket.OPEN) {
            socket.send(JSON.stringify(message));
        } else {
            console.error("DataTables Tab: WebSocket is not connected.");
        }
    }

    connect();
});
</script>
