/**
 * @fileoverview This Playwright script provides end-to-end verification for
 * the action queue functionality on the dirt-tabulator page. It verifies:
 * 1. The queue correctly loads its initial state from the server.
 * 2. Removing an item from the queue correctly updates the UI without
 *    affecting other items.
 */

const { test, expect } = require('@playwright/test');
const fs = require('fs');
const path = require('path');

// Path to the temporary HTML file generated by the test:ui:prepare script
const DIRT_TABULATOR_PAGE = path.join(__dirname, '../../../jules-scratch/verification/temp_tabulator.html');
const SCREENSHOT_DIR = path.join(__dirname, '../../../test-results');

test.describe('Action Queue Full Functionality Verification', () => {
  test('should load initial queue and allow correct removal of single items', async ({ page }) => {
    // Ensure screenshot directory exists
    if (!fs.existsSync(SCREENSHOT_DIR)) {
        fs.mkdirSync(SCREENSHOT_DIR, { recursive: true });
    }

    // --- 1. VERIFY INITIAL LOAD ---
    // Arrange: Navigate to the local page file.
    await page.goto(`file://${DIRT_TABULATOR_PAGE}`);

    // Act: Wait for the action queue table to be populated.
    const queueTable = page.locator('#action-queue-table .tabulator-row');
    await queueTable.first().waitFor({ state: 'visible', timeout: 15000 });

    // Assert: Check that the queue table has the expected number of initial items.
    // The seed script creates exactly two queued items.
    await expect(queueTable).toHaveCount(2);
    await page.screenshot({ path: path.join(SCREENSHOT_DIR, '01-initial-queue-load.png') });
    console.log(`Screenshot saved for initial load.`);

    // --- 2. VERIFY SINGLE ITEM REMOVAL ---
    // Arrange: Get a locator for the removal icon ('fa-trash') of the first row.
    const firstRow = queueTable.first();
    const removeIcon = firstRow.locator('.fa-trash');

    // Act: Click the removal icon.
    await removeIcon.click();

    // Assert: Check that only one item remains in the queue table.
    await expect(queueTable).toHaveCount(1);
    await page.screenshot({ path: path.join(SCREENSHOT_DIR, '02-after-single-removal.png') });
    console.log(`Screenshot saved after single removal.`);
  });
});
