/**
 * @fileoverview This Playwright script provides a definitive end-to-end
 * verification for the full lifecycle of the action queue on the
 * dirt-tabulator page. It verifies:
 * 1. The queue correctly loads its initial state from the server.
 * 2. Adding a new action by clicking a radio button in the main table
 *    correctly adds a corresponding row to the queue table.
 * 3. Removing an item from the queue table correctly removes the row and
 *    does not affect other items.
 */

const { test, expect } = require('@playwright/test');
const fs = require('fs');
const path = require('path');

// Path to the temporary HTML file generated by the test:ui:prepare script
const DIRT_TABULATOR_PAGE = path.join(__dirname, '../../../jules-scratch/verification/temp_tabulator.html');
const SCREENSHOT_DIR = path.join(__dirname, '../../../test-results');

test.describe('Action Queue Full Lifecycle Verification', () => {
  test('should load, add, and remove queue items correctly', async ({ page }) => {
    // Ensure screenshot directory exists
    if (!fs.existsSync(SCREENSHOT_DIR)) {
        fs.mkdirSync(SCREENSHOT_DIR, { recursive: true });
    }

    // --- 1. VERIFY INITIAL LOAD ---
    // Arrange: Navigate to the local page file.
    await page.goto(`file://${DIRT_TABULATOR_PAGE}`);

    // Act: Wait for the action queue table to be populated.
    const queueTable = page.locator('#action-queue-table .tabulator-row');
    await queueTable.first().waitFor({ state: 'visible', timeout: 15000 });

    // Assert: Check that the queue table has the expected number of initial items (2).
    await expect(queueTable).toHaveCount(2);
    await page.screenshot({ path: path.join(SCREENSHOT_DIR, '01-lifecycle-initial-load.png') });
    console.log(`Screenshot saved for initial load.`);

    // --- 2. VERIFY ADDING A NEW ITEM ---
    // Arrange: Find a row in the main duplicates table that is NOT disabled.
    // The seed script makes the first file in each group the original, so the second row should be available.
    const mainTable = page.locator('#duplicatesTable');
    const secondRowInMainTable = mainTable.locator('.tabulator-row').nth(1);
    const deleteRadioButton = secondRowInMainTable.locator('input[type="radio"][value="delete"]');

    // Act: Click the 'delete' radio button to add a new action to the queue.
    await deleteRadioButton.click();

    // Assert: Check that the queue table now has 3 items.
    await expect(queueTable).toHaveCount(3);
    await page.screenshot({ path: path.join(SCREENSHOT_DIR, '02-lifecycle-after-add.png') });
    console.log(`Screenshot saved after adding an item.`);

    // --- 3. VERIFY REMOVING AN ITEM ---
    // Arrange: Get a locator for the removal icon of the newly added item (now the last row).
    const lastQueueRow = queueTable.last();
    const removeIcon = lastQueueRow.locator('.fa-trash');

    // Act: Click the removal icon.
    await removeIcon.click();

    // Assert: Check that the queue table is back to 2 items.
    await expect(queueTable).toHaveCount(2);
    await page.screenshot({ path: path.join(SCREENSHOT_DIR, '03-lifecycle-after-remove.png') });
    console.log(`Screenshot saved after removing an item.`);
  });
});
