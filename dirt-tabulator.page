Menu="DiskUtilities"
Title="Deduplication in Real-Time"
Icon="fa-search-minus"
---
<link href="https://unpkg.com/tabulator-tables@6.3.1/dist/css/tabulator.min.css" rel="stylesheet">
<link href="/plugins/bobbintb.system.dirt/nodejs/css/dirt-tabulator.css" rel="stylesheet">
<script type="text/javascript" src="https://unpkg.com/tabulator-tables@6.3.1/dist/js/tabulator.min.js"></script>
<script src="https://unpkg.com/split.js/dist/split.min.js"></script>
<script src="/plugins/bobbintb.system.dirt/nodejs/dirt-tabulator-helpers.js"></script>
<script src="/plugins/bobbintb.system.dirt/nodejs/dirt-tabulator-formatters.js"></script>
<div id="split">
    <div id="duplicatesTable-container">
        <div id="duplicatesTable"></div>
    </div>
    <div id="action-queue-container">
        <div id="action-queue-table"></div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    Split(['#duplicatesTable-container', '#action-queue-container'], {
        gutterSize: 10,
        sizes: [70, 30], // Initial sizes in percentage
        minSize: [200, 100], // Minimum sizes in pixels
    });

    let socket;
    let table;
    let actionQueueTable;
    let actionQueueData = {}; // To hold the initial queue state

    // The Tabulator table definition for the Action Queue
    actionQueueTable = new Tabulator("#action-queue-table", {
        height: "100%",
        data: [],
        placeholder: "No actions queued",
        layout: "fitColumns",
        columns: [
            {
                title: `<i class="fa fa-trash" style="cursor: pointer;" title="Remove All"></i>`,
                field: "action",
                hozAlign: "center",
                width: 40,
                minWidth: 40,
                resizable: false,
                headerSort: false,
                headerHozAlign: "center",
                headerClick: function(e, column) {
                    const rows = actionQueueTable.getRows();
                    rows.forEach(row => {
                        const cell = row.getCell('action');
                        const icon = cell.getElement().querySelector('i');
                        if (icon) {
                            icon.click();
                        }
                    });
                },
                formatter: createActionQueueActionFormatter(),
                cellClick: function(e, cell) {
                    const rowData = cell.getRow().getData();
                    const filePath = rowData.file;
                    removeFileActionFromQueue(filePath, dirtySock);
                    const matchingRows = table.searchRows("path", "=", filePath);
                    if (matchingRows.length > 0) {
                        const actionCell = matchingRows[0].getCell('action');
                        const radioInputs = actionCell.getElement().querySelectorAll('input[type="radio"]');
                        radioInputs.forEach(radio => {
                            if (radio.checked) {
                                radio.click();
                            }
                        });
                    }
                    updateActionQueueTable(table, actionQueueTable);
                }
            },
            { title: "File", field: "file", hozAlign: "left", tooltip: true },
        ],
    });

    // The Tabulator table definition
    table = new Tabulator("#duplicatesTable", {
        height: "100%",
        data: [],
        placeholder: "No duplicate files found",
        layout: "fitColumns",
        groupBy: "hash",
        groupHeader: createGroupHeader(),
        rowFormatter: createRowFormatter(),
        columns: [
            {
                title: "",
                field: "isPrimary",
                hozAlign: "center",
                headerSort: false,
                width: 30,
                minWidth: 30,
                resizable: false,
                formatter: createIsPrimaryFormatter(removeFileActionFromQueue, dirtySock, () => updateActionQueueTable(table, actionQueueTable)),
            },
            {
                field: "action",
                hozAlign: "center",
                headerSort: false,
                width: 65,
                resizable: false,
                titleFormatter: createActionTitleFormatter(),
                headerClick: function(e, column) {
                    const target = e.target;
                    if (target.tagName !== 'INPUT') return;

                    const action = target.value;
                    const headerEl = column.getElement();
                    const delRadio = headerEl.querySelector('input[value="delete"]');
                    const linkRadio = headerEl.querySelector('input[value="link"]');

                    if (target.checked && target.getAttribute('data-waschecked') === 'true') {
                        target.checked = false;
                        target.setAttribute('data-waschecked', 'false');
                    } else {
                        delRadio.setAttribute('data-waschecked', 'false');
                        linkRadio.setAttribute('data-waschecked', 'false');
                        target.setAttribute('data-waschecked', 'true');
                    }

                    const effectiveCheckedState = target.checked;
                    const groups = table.getGroups();

                    groups.forEach(group => {
                        const groupEl = group.getElement();
                        const groupRadio = groupEl.querySelector(`input[value="${action}"]`);
                        if (groupRadio) {
                            if ((effectiveCheckedState && !groupRadio.checked) || (!effectiveCheckedState && groupRadio.checked)) {
                                groupRadio.click();
                            }
                        }
                    });
                },
                formatter: createActionFormatter(actionQueueData, removeFileActionFromQueue, dirtySock, () => updateActionQueueTable(table, actionQueueTable)),
            },
            {
                title: "File",
                field: "path",
                headerSort: false,
                widthGrow: 1,
                bottomCalc: "count",
            },
            { title: "Size", field: "size", formatter: formatSize, width: 90, resizable: false },
            { title: "Modified", field: "mtime", formatter: formatDate, width: 170, resizable: false },
            { title: "Changed", field: "ctime", formatter: formatDate, width: 170, resizable: false }
        ],
    });

    function connect() {
        socket = new WebSocket(`ws://${window.location.hostname}:41820?clientId=dirt-tabulator.page`);

        socket.onopen = function() {
            console.log("Tabulator Tab: WebSocket connection established.");
            dirtySock('findDuplicates', null);
        };

        socket.onmessage = function(event) {
            const parsedMessage = JSON.parse(event.data);
            const { action, data } = parsedMessage;

            if (action === 'duplicateFiles') {
                console.log("Tabulator Tab: Received duplicateFiles data package.");
                const { duplicates, state, queue } = data;
                processAndRenderTable(duplicates, state, queue);
            }
        };

        function processAndRenderTable(duplicateFilesData, originalFileState, receivedActionQueueData) {
            console.log("Tabulator Tab: Processing and rendering tables.");
            actionQueueData = receivedActionQueueData;
            const queueTableData = Object.entries(receivedActionQueueData).map(([path, action]) => ({
                action: action,
                file: path,
            }));
            actionQueueTable.setData(queueTableData);
            const tableData = [];
            duplicateFilesData.forEach(group => {
                const originalIno = originalFileState[group.hash];
                group.files.forEach((file, index) => {
                    const isOriginal = originalIno ? (file.ino === originalIno) : (index === 0);
                    tableData.push({
                        ...file,
                        hash: group.hash,
                        isOriginal: isOriginal
                    });
                });
            });
            table.setData(tableData);
        }

        socket.onclose = function(event) {
            console.log("Tabulator Tab: WebSocket connection closed. Reconnecting...");
            setTimeout(connect, 1000);
        };

        socket.onerror = function(error) {
            console.error("Tabulator Tab: WebSocket error: ", error);
            socket.close();
        };
    }

    function dirtySock(action, data) {
        const message = {
            clientId: "dirt-tabulator.page",
            action: action,
            data: data
        };
        if (socket && socket.readyState === WebSocket.OPEN) {
            socket.send(JSON.stringify(message));
        } else {
            console.error("Tabulator Tab: WebSocket is not connected.");
        }
    }

    connect();
});
</script>
