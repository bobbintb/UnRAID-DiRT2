Menu="DiskUtilities"
Title="Deduplication in Real-Time"
Icon="fa-search-minus"
---
<link href="https://unpkg.com/tabulator-tables@6.3.1/dist/css/tabulator.min.css" rel="stylesheet">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css" integrity="sha512-SnH5WK+bZxgPHs44uWIX+LLJAJ9/2PkPKZ5QiAj6Ta86w+fsb2TkcmfRyVX3pBnMFcV7oQPJkl9QevSCWr3W6A==" crossorigin="anonymous" referrerpolicy="no-referrer" />
<link href="/plugins/bobbintb.system.dirt/nodejs/css/dirt-tabulator-rewrite.css" rel="stylesheet">
<script type="text/javascript" src="https://unpkg.com/tabulator-tables@6.3.1/dist/js/tabulator.min.js"></script>
<script src="https://unpkg.com/split.js/dist/split.min.js"></script>

<div id="tabulator-page-wrapper">
    <div class="split-container">
        <div id="left-table" class="split"></div>
        <div id="right-table" class="split">
            <div id="right-table-element"></div>
            <div id="right-table-footer">
                <button id="reset-button">Reset</button>
                <button id="process-button">Process</button>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        Split(['#left-table', '#right-table'], {
            sizes: [70, 30],
            minSize: [300, 200],
            gutterSize: 10,
            cursor: 'col-resize',
        });

        let socket;
        let leftTable;
        let rightTable;
        let tableData = []; // Shared reactive data source

        const leftTableElement = document.getElementById('left-table');
        const rightTableElement = document.getElementById('right-table-element');

        function connect() {
            socket = new WebSocket(`ws://${window.location.hostname}:41820?clientId=dirt-tabulator.page`);

            socket.onopen = function() {
                console.log("Tabulator Rewrite: WebSocket connection established.");
                dirtySock('findDuplicates', null);
            };

            socket.onmessage = handleWebSocketMessage;

            socket.onclose = function(event) {
                console.log("Tabulator Rewrite: WebSocket connection closed. Reconnecting...");
                setTimeout(connect, 1000);
            };

            socket.onerror = function(error) {
                console.error("Tabulator Rewrite: WebSocket error: ", error);
                socket.close();
            };
        }

        function dirtySock(action, data) {
            const message = {
                clientId: "dirt-tabulator.page",
                action: action,
                data: data
            };
            if (socket && socket.readyState === WebSocket.OPEN) {
                socket.send(JSON.stringify(message));
            } else {
                console.error("Tabulator Rewrite: WebSocket is not connected.");
            }
        }

        function initializeTables(duplicates, state, queue) {
            // Process raw data into a single reactive source
            tableData = [];
            duplicates.forEach(group => {
                const originalIno = state[group.hash];
                group.files.forEach((file, index) => {
                    const queuedAction = queue[file.path] || null;
                    const isOriginal = originalIno ? (file.ino === originalIno) : (index === 0);

                    tableData.push({
                        ...file,
                        hash: group.hash,
                        isOriginal: isOriginal,
                        action: queuedAction,
                        id: file.ino // Unique ID for Tabulator
                    });
                });
            });

            // Destroy existing tables if they exist to prevent issues on reconnect
            if (Tabulator.findTable("#left-table")[0]) {
                Tabulator.findTable("#left-table")[0].destroy();
            }
            if (Tabulator.findTable("#right-table-element")[0]) {
                Tabulator.findTable("#right-table-element")[0].destroy();
            }

            // ============== Helper Functions ==============
            function formatBytes(bytes, decimals = 2) {
                if (bytes === 0) return '0 Bytes';
                const k = 1024;
                const dm = decimals < 0 ? 0 : decimals;
                const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
                const i = Math.floor(Math.log(bytes) / Math.log(k));
                return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
            }

            // ============== Left Table Definitions ==============
            const leftTableColumns = [
                // Column 1: Group Radio Buttons (Original File Selection)
                {
                    title: "",
                    field: "isOriginal",
                    width: 40,
                    resizable: false,
                    hozAlign: "center",
                    formatter: function(cell, formatterParams, onRendered) {
                        const rowData = cell.getRow().getData();
                        const input = document.createElement("input");
                        input.type = "radio";
                        input.name = "original_" + rowData.hash;
                        input.checked = cell.getValue();
                        return input;
                    },
                    cellClick: function(e, cell) {
                        const clickedRow = cell.getRow();
                        const clickedRowData = clickedRow.getData();

                        // If already selected, do nothing
                        if (clickedRowData.isOriginal) return;

                        // Update all rows in the group
                        clickedRow.getGroup().getRows().forEach(row => {
                            row.update({ isOriginal: false });
                        });
                        clickedRow.update({ isOriginal: true });

                        // Persist change
                        dirtySock('setOriginalFile', { hash: clickedRowData.hash, inode: clickedRowData.ino });
                    }
                },
                // Column 2: Dual Nullable Action Buttons
                {
                    title: "Action",
                    field: "action",
                    width: 100,
                    resizable: false,
                    hozAlign: "center",
                    formatter: function(cell, formatterParams, onRendered) {
                        const rowData = cell.getRow().getData();
                        const container = document.createElement("span");
                        const trashIcon = document.createElement("i");
                        const linkIcon = document.createElement("i");

                        trashIcon.className = "fa fa-trash";
                        trashIcon.style.cursor = "pointer";
                        trashIcon.style.marginRight = "15px";
                        trashIcon.style.color = rowData.action === 'delete' ? 'red' : 'inherit';

                        linkIcon.className = "fa fa-link";
                        linkIcon.style.cursor = "pointer";
                        linkIcon.style.color = rowData.action === 'link' ? 'blue' : 'inherit';

                        trashIcon.onclick = () => handleActionClick(cell, 'delete');
                        linkIcon.onclick = () => handleActionClick(cell, 'link');

                        container.appendChild(trashIcon);
                        container.appendChild(linkIcon);
                        return container;
                    }
                },
                // Columns 3-6: Metadata
                { title: "Path", field: "path", resizable: true, widthGrow: 1, tooltip: true },
                { title: "Size", field: "size", width: 100, hozAlign: "right", resizable: false, formatter: (cell) => formatBytes(cell.getValue()) },
                { title: "Modified", field: "mtime", width: 150, hozAlign: "center", resizable: false },
                { title: "Created", field: "ctime", width: 150, hozAlign: "center", resizable: false },
            ];

            function handleActionClick(cell, actionType) {
                const row = cell.getRow();
                const rowData = row.getData();

                if (rowData.isOriginal) return;

                const currentAction = rowData.action;
                const newAction = currentAction === actionType ? null : actionType;

                // This reactive update will flow to both tables
                row.update({ action: newAction });

                // Persist change using the correct identifier (ino)
                if (newAction) {
                    dirtySock('setFileAction', { ino: rowData.ino, path: rowData.path, action: newAction });
                } else {
                    dirtySock('removeFileAction', { ino: rowData.ino });
                }
            }

            // Initialize Left Table
            leftTable = new Tabulator(leftTableElement, {
                data: tableData,
                reactiveData: true,
                layout: "fitColumns",
                placeholder: "Loading data...",
                groupBy: "hash",
                groupHeader: function(value, count, data, group) {
                    const header = document.createElement("div");
                    header.style.cssText = `padding: 5px; border-bottom: 1px solid #dee2e6; background-color: #f8f9fa; display: flex; align-items: center;`;

                    const title = document.createElement("span");
                    title.textContent = `${value} (${count} files)`;

                    const controls = document.createElement("span");
                    controls.style.marginLeft = "20px";

                    const trashIcon = document.createElement("i");
                    trashIcon.className = "fa fa-trash";
                    trashIcon.style.cursor = "pointer";
                    trashIcon.style.marginRight = "15px";
                    trashIcon.title = "Toggle Delete for all in group";

                    const linkIcon = document.createElement("i");
                    linkIcon.className = "fa fa-link";
                    linkIcon.style.cursor = "pointer";
                    linkIcon.title = "Toggle Link for all in group";

                    trashIcon.onclick = () => toggleGroupAction(group, 'delete');
                    linkIcon.onclick = () => toggleGroupAction(group, 'link');

                    controls.appendChild(trashIcon);
                    controls.appendChild(linkIcon);
                    header.appendChild(title);
                    header.appendChild(controls);
                    return header;
                },
                rowFormatter: function(row) {
                    if (row.getData().isOriginal) {
                        row.getElement().classList.add("disabled-row");
                    } else {
                        row.getElement().classList.remove("disabled-row");
                    }
                },
                columns: leftTableColumns,
            });

            function toggleGroupAction(group, actionType) {
                const rows = group.getRows();
                const eligibleRows = rows.filter(row => !row.getData().isOriginal);

                // Determine if all eligible rows already have this action set
                const allSet = eligibleRows.every(row => row.getData().action === actionType);
                const newAction = allSet ? null : actionType;

                eligibleRows.forEach(row => {
                    row.update({ action: newAction });
                    // Persist change
                    if (newAction) {
                        dirtySock('setFileAction', { path: row.getData().path, action: newAction });
                    } else {
                        dirtySock('removeFileAction', { path: row.getData().path });
                    }
                });
            }

            // ============== Right Table Definitions ==============
            const rightTableColumns = [
                {
                    title: '<i class="fa fa-trash"></i>',
                    field: "action",
                    width: 40,
                    resizable: false,
                    hozAlign: "center",
                    headerClick: function(e, column) {
                        if (confirm("Are you sure you want to clear all pending actions?")) {
                            dirtySock('clearQueue', {});
                        }
                    },
                    formatter: function(cell, formatterParams, onRendered) {
                        const action = cell.getValue();
                        if (action === 'delete') {
                            return '<i class="fa fa-trash" style="color: red;"></i>';
                        } else if (action === 'link') {
                            return '<i class="fa fa-link" style="color: blue;"></i>';
                        }
                        return "";
                    },
                    cellClick: function(e, cell) {
                        const row = cell.getRow();
                        const rowData = row.getData();
                        // Setting action to null will reactively remove it from this table's view
                        row.update({ action: null });
                        // Persist change using the correct identifier
                        dirtySock('removeFileAction', { ino: rowData.ino });
                    }
                },
                { title: "Path", field: "path", resizable: false, tooltip: true }
            ];

            // Initialize Right Table
            rightTable = new Tabulator(rightTableElement, {
                data: tableData,
                reactiveData: true,
                layout: "fitColumns",
                placeholder: "No actions queued",
                columns: rightTableColumns,
            });

            // Apply the filter after the table is initialized
            rightTable.setFilter("action", "!=", null);
        }

        function handleWebSocketMessage(event) {
            const parsedMessage = JSON.parse(event.data);
            const { action, data } = parsedMessage;

            if (action === 'duplicateFiles') {
                console.log("Tabulator Rewrite: Received duplicateFiles data package.");
                const { duplicates, state, queue } = data;
                initializeTables(duplicates, state, queue);
            } else if (action === 'queueCleared') {
                console.log("Tabulator Rewrite: Queue cleared. Clearing local state.");
                // Update the shared reactive data source
                tableData.forEach(row => {
                    if (row.action) {
                        // This reactive update will automatically propagate to both tables
                        row.action = null;
                    }
                });
            } else if (action === 'resetComplete') {
                console.log("Tabulator Rewrite: Reset complete. Fetching fresh data.");
                // Request new data, which will re-initialize the tables
                dirtySock('findDuplicates', null);
            }
        }

        // Footer Button Listeners
        document.getElementById('reset-button').addEventListener('click', () => {
            if(confirm("This will clear all pending actions and reset all 'original file' selections. Are you sure?")) {
                dirtySock('resetState', {});
            }
        });

        document.getElementById('process-button').addEventListener('click', () => {
            // No functionality yet, as per instructions
            alert("Processing functionality is not yet implemented.");
        });

        connect();
    });
</script>
