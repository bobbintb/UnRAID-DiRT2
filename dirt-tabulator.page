Menu="dirtSettings:4"
Title="Tabulator"
---
<link href="https://unpkg.com/tabulator-tables@6.3.1/dist/css/tabulator.min.css" rel="stylesheet">
<script type="text/javascript" src="https://unpkg.com/tabulator-tables@6.3.1/dist/js/tabulator.min.js"></script>

<div id="duplicatesTable-tabulator"></div>

<script>
document.addEventListener("DOMContentLoaded", function() {
    let socket;
    let table;

    function connect() {
      socket = new WebSocket(`ws://${window.location.hostname}:41820?clientId=dirt-tabulator.page`);

      socket.onopen = function() {
        console.log("Tabulator Tab: WebSocket connection established.");
        dirtySock('findDuplicates', null);
      };

      socket.onmessage = function(event) {
        const parsedMessage = JSON.parse(event.data);
        const { action, data } = parsedMessage;

        if (action === 'duplicateFiles') {
          console.log("Tabulator Tab: Received duplicateFiles data.");

          // Tabulator's data tree requires the children array to be named '_children'
          const tableData = data.map(group => {
              return { ...group, _children: group.files };
          });

          table = new Tabulator("#duplicatesTable-tabulator", {
              data: tableData,
              layout: "fitColumns",
              dataTree: true,
              dataTreeStartExpanded: false,
              placeholder: "No duplicate files found",
              columns: [
                  {
                      title: "Hash / Path",
                      field: "hash", // This field is mainly for the parent row
                      widthGrow: 3,
                      formatter: (cell) => {
                          const rowData = cell.getRow().getData();
                          // If it's a parent row (has a hash), show the hash bolded.
                          if (rowData.hash) {
                              return `<strong>${rowData.hash}</strong>`;
                          }
                          // If it's a child row, show the path. Tabulator will auto-indent this.
                          return rowData.path;
                      },
                      htmlOutput: true,
                  },
                  {
                      title: "Count / Modified",
                      widthGrow: 1.5,
                      formatter: (cell) => {
                          const rowData = cell.getRow().getData();
                          // If it's a parent row, show the file count.
                          if (rowData.hash) {
                              return rowData._children ? rowData._children.length : 0;
                          }
                          // If it's a child row, show the modified date.
                          return rowData.mtime ? new Date(rowData.mtime).toLocaleString() : '';
                      }
                  },
                  {
                      title: "Size",
                      field: "size",
                      widthGrow: 1,
                      formatter: (cell) => {
                          const rowData = cell.getRow().getData();
                          // Only show size on the parent row.
                          return rowData.hash ? rowData.size : "";
                      }
                  }
              ],
          });
        }
      };

      socket.onclose = function(event) {
        console.log("Tabulator Tab: WebSocket connection closed. Reconnecting...");
        setTimeout(connect, 1000);
      };

      socket.onerror = function(error) {
        console.error("Tabulator Tab: WebSocket error: ", error);
        socket.close();
      };
    }

    function dirtySock(action, data) {
        const message = {
          clientId: "dirt-tabulator.page",
          action: action,
          data: data
        };
        if (socket && socket.readyState === WebSocket.OPEN) {
          socket.send(JSON.stringify(message));
        } else {
          console.error("Tabulator Tab: WebSocket is not connected.");
        }
    }

    connect();
});
</script>
