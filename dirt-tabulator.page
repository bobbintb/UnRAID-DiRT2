Menu="dirtSettings:2"
Title="Tabulator"
---
<link href="https://unpkg.com/tabulator-tables@6.3.1/dist/css/tabulator.min.css" rel="stylesheet">
<script type="text/javascript" src="https://unpkg.com/tabulator-tables@6.3.1/dist/js/tabulator.min.js"></script>

<style>
    #tabulator-wrapper {
        height: calc(100vh - 200px); /* Adjust for Unraid header/footer */
        width: 100%;
    }
    /* Hide the tree branch element in the radio button column */
    .tabulator-cell[tabulator-field="isPrimary"] .tabulator-data-tree-branch {
        display: none;
    }

    .disabled-row {
        background-color: #f2f2f2 !important;
        color: #999 !important;
        pointer-events: none;
    }
    .disabled-row .tabulator-cell {
        pointer-events: none;
    }
    .group-footer {
        background-color: #e0e0e0 !important;
        font-weight: bold;
    }

    /* Style for the Del/Link icons */
    .tabulator-cell[tabulator-field="action"] input[type="radio"] {
        display: none; /* Hide the actual radio button */
    }

    .tabulator-cell[tabulator-field="action"] label {
        cursor: pointer;
        padding: 0 5px; /* Add some space around the icons */
        font-size: 1.2em;
        background-color: transparent;
        border: none;
    }

    .tabulator-cell[tabulator-field="action"] input[type="radio"]:checked + label {
        color: #007bff; /* Highlight the selected icon */
    }

    /* Remove unwanted background on action column */
    .tabulator-cell[tabulator-field="action"] {
        background-color: transparent !important;
    }
</style>
<div id="tabulator-wrapper">
    <div id="duplicatesTable"></div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    let socket;
    let table;

    function formatBytes(bytes, decimals = 2) {
        if (bytes === 0) return '0 Bytes';
        const k = 1024;
        const dm = decimals < 0 ? 0 : decimals;
        const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
    }

    // Helper function to format dates
    function formatDate(cell) {
        const data = cell.getRow().getData();
        if (data.isGroupFooter) {
            return "";
        }
        const value = cell.getValue();
        return value ? new Date(value).toLocaleString() : '';
    }

    // Helper function to format size
    function formatSize(cell) {
        const data = cell.getRow().getData();
        if (data.isGroupFooter || !!data._children) {
            return "";
        }
        const value = cell.getValue();
        return formatBytes(value);
    }

    // Custom formatter for the tree's first column
    const treeFormatter = (cell, formatterParams, onRendered) => {
        const data = cell.getRow().getData();
        const isParent = !!data._children; // Check if it's a parent group

        if (isParent) {
            const strong = document.createElement('strong');
            strong.textContent = `Group: ${data.hash}`;

            const span = document.createElement('span');
            span.textContent = ` (${data.count} files, ${formatBytes(data.totalSize)})`;

            const container = document.createElement('div');
            container.appendChild(strong);
            container.appendChild(span);
            return container;
        } else if (data.isGroupFooter) {
            return `Group Total: ${data.count} files`;
        } else {
            // It's a child row, just show the path
            return data.path;
        }
    };

    // The Tabulator table definition
    table = new Tabulator("#duplicatesTable", {
        height: "100%", // Use full page height
        data: [], // Set initial data to empty
        placeholder: "No duplicate files found",
        dataTree: true,
        dataTreeChildColumnCalcs: true, // include child rows in column calculations
        dataTreeStartExpanded: true, // Expand all nodes by default
        dataTreeChildIndent: 0, // Remove tree branch indentation
        dataTreeSelectPropagate: false, // Disable default parent/child selection propagation
        rowFormatter: function(row) {
            const data = row.getData();
            if (data.isGroupFooter) {
                row.getElement().classList.add('group-footer');
            } else if (data.isOriginal) {
                row.getElement().classList.add('disabled-row');
            }
        },
        columns: [
            {
                title: "",
                field: "isPrimary",
                hozAlign: "center",
                headerSort: false,
                width: 30,
                minWidth: 30,
                resizable: false,
                formatter: function(cell, formatterParams, onRendered) {
                    const data = cell.getRow().getData();
                    if (data.isGroupFooter || !!data._children) {
                        return "";
                    }
                    const radio = document.createElement("input");
                    radio.type = "radio";
                    radio.name = "primary_group_" + cell.getRow().getTreeParent().getData().hash;
                    radio.checked = data.isOriginal;

                    radio.addEventListener('click', function() {
                        const clickedRow = cell.getRow();
                        const groupRows = clickedRow.getTreeParent().getTreeChildren();

                        groupRows.forEach(row => {
                            const rowEl = row.getElement();
                            if (row === clickedRow) {
                                rowEl.classList.add('disabled-row');
                                // Uncheck any action radios in this row
                                const actionRadios = rowEl.querySelectorAll('.tabulator-cell[tabulator-field="action"] input[type="radio"]');
                                actionRadios.forEach(r => r.checked = false);
                            } else {
                                rowEl.classList.remove('disabled-row');
                            }
                        });

                        // Send the selection to the backend
                        const groupHash = clickedRow.getTreeParent().getData().hash;
                        const fileIno = clickedRow.getData().ino;
                        dirtySock('setOriginalFile', { hash: groupHash, ino: fileIno });
                    });

                    return radio;
                }
            },
            {
                title: "Del/Link",
                field: "action",
                hozAlign: "center",
                headerSort: false,
                width: 80,
                formatter: function(cell, formatterParams, onRendered) {
                    const data = cell.getRow().getData();
                    if (data.isGroupFooter || !!data._children) {
                        return "";
                    }

                    const uniqueName = "action_" + data.ino;
                    const container = document.createElement("div");

                    // --- Delete Radio ---
                    const delRadio = document.createElement("input");
                    delRadio.type = "radio";
                    delRadio.name = uniqueName;
                    delRadio.value = "delete";
                    delRadio.id = `del_${uniqueName}`;
                    delRadio.dataset.nullable = true;

                    const delLabel = document.createElement("label");
                    delLabel.htmlFor = `del_${uniqueName}`;
                    delLabel.title = "Delete";
                    delLabel.innerHTML = `<i class="fa fa-trash"></i>`;

                    // --- Link Radio ---
                    const linkRadio = document.createElement("input");
                    linkRadio.type = "radio";
                    linkRadio.name = uniqueName;
                    linkRadio.value = "link";
                    linkRadio.id = `link_${uniqueName}`;
                    linkRadio.dataset.nullable = true;

                    const linkLabel = document.createElement("label");
                    linkLabel.htmlFor = `link_${uniqueName}`;
                    linkLabel.title = "Hardlink";
                    linkLabel.innerHTML = `<i class="fa fa-link"></i>`;

                    // --- Event Handling for Nullable ---
                    const nullableClickHandler = function(e) {
                        const target = e.target;
                        if (target.checked && target.getAttribute('data-waschecked') === 'true') {
                            target.checked = false;
                            target.setAttribute('data-waschecked', 'false');
                        } else {
                            delRadio.setAttribute('data-waschecked', 'false');
                            linkRadio.setAttribute('data-waschecked', 'false');
                            target.setAttribute('data-waschecked', 'true');
                        }
                    };

                    delRadio.addEventListener('click', nullableClickHandler);
                    linkRadio.addEventListener('click', nullableClickHandler);

                    container.appendChild(delRadio);
                    container.appendChild(delLabel);
                    container.appendChild(linkRadio);
                    container.appendChild(linkLabel);

                    return container;
                }
            },
            {
                title: "File/Group",
                field: "path",
                formatter: treeFormatter,
                headerSort: false,
                htmlOutput:true,
                widthGrow: 1,
                bottomCalc: function(values, data, calcParams) {
                    // Count only the actual file rows (not group headers or footers)
                    let count = 0;
                    data.forEach(group => {
                        if (group._children) {
                            group._children.forEach(child => {
                                if (!child.isGroupFooter) {
                                    count++;
                                }
                            });
                        }
                    });
                    return `Total Files: ${count}`;
                }
            },
            { title: "Size", field: "size", formatter: formatSize, width: "auto", resizable: false },
            { title: "Accessed", field: "atime", formatter: formatDate, width: "auto", resizable: false },
            { title: "Modified", field: "mtime", formatter: formatDate, width: "auto", resizable: false },
            { title: "Changed", field: "ctime", formatter: formatDate, width: "auto", resizable: false }
        ],
    });

    function connect() {
        socket = new WebSocket(`ws://${window.location.hostname}:41820?clientId=dirt-tabulator.page`);

        socket.onopen = function() {
            console.log("Tabulator Tab: WebSocket connection established.");
            // Request both sets of data concurrently
            dirtySock('findDuplicates', null);
            dirtySock('getOriginalFileState', null);
        };

        let duplicateFilesData = null;
        let originalFileState = null;

        function processAndRenderTable() {
            // Ensure both data sets are available
            if (duplicateFilesData === null || originalFileState === null) {
                return;
            }

            console.log("Tabulator Tab: Both data sets received. Rendering table.");

            const tableData = duplicateFilesData.map(group => {
                const originalIno = originalFileState[group.hash];

                const children = group.files.map((file, index) => {
                    // Determine if this is the original file.
                    // If state is present for this group, use it.
                    // Otherwise, default to the first file in the group.
                    const isOriginal = originalIno ? (file.ino === originalIno) : (index === 0);
                    return { ...file, isOriginal };
                });

                // Add the group footer row
                children.push({
                    isGroupFooter: true,
                    hash: group.hash,
                    count: group.count,
                    totalSize: group.totalSize
                });

                return { ...group, _children: children };
            });

            table.setData(tableData);
        }

        socket.onmessage = function(event) {
            const parsedMessage = JSON.parse(event.data);
            const { action, data } = parsedMessage;

            if (action === 'duplicateFiles') {
                console.log("Tabulator Tab: Received duplicateFiles data.");
                duplicateFilesData = data;
                processAndRenderTable();
            } else if (action === 'originalFileState') {
                console.log("Tabulator Tab: Received originalFileState data.");
                originalFileState = data;
                processAndRenderTable();
            }
        };

        socket.onclose = function(event) {
            console.log("Tabulator Tab: WebSocket connection closed. Reconnecting...");
            setTimeout(connect, 1000);
        };

        socket.onerror = function(error) {
            console.error("Tabulator Tab: WebSocket error: ", error);
            socket.close();
        };
    }

    function dirtySock(action, data) {
        const message = {
            clientId: "dirt-tabulator.page",
            action: action,
            data: data
        };
        if (socket && socket.readyState === WebSocket.OPEN) {
            socket.send(JSON.stringify(message));
        } else {
            console.error("Tabulator Tab: WebSocket is not connected.");
        }
    }

    connect();
});
</script>
