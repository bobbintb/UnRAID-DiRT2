Menu="dirtSettings:2"
Title="Tabulator"
---
<link href="https://unpkg.com/tabulator-tables@5.5.2/dist/css/tabulator.min.css" rel="stylesheet">
<script type="text/javascript" src="https://unpkg.com/tabulator-tables@5.5.2/dist/js/tabulator.min.js"></script>

<div id="duplicatesTable"></div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    let socket;
    let table;

    // Helper function to format dates
    function formatDate(cell) {
        const value = cell.getValue();
        return value ? new Date(value).toLocaleString() : '';
    }

    // The Tabulator table definition
    table = new Tabulator("#duplicatesTable", {
        data: [], // Set initial data to empty
        layout: "fitColumns",
        placeholder: "No duplicate files found",
        dataTree: true,
        dataTreeStartExpanded: true, // Expand all nodes by default
        columns: [
            { title: "Path", field: "path", htmlOutput: true }, // Render HTML for <br> tags
            { title: "Hash", field: "hash" },
            { title: "Files", field: "count" },
            { title: "Total Size", field: "totalSize" },
            { title: "Size", field: "size" },
            { title: "Accessed", field: "atime", formatter: formatDate },
            { title: "Modified", field: "mtime", formatter: formatDate },
            { title: "Changed", field: "ctime", formatter: formatDate },
        ],
    });

    function connect() {
        socket = new WebSocket(`ws://${window.location.hostname}:41820?clientId=dirt-tabulator.page`);

        socket.onopen = function() {
            console.log("Tabulator Tab: WebSocket connection established.");
            dirtySock('findDuplicates', null);
        };

        socket.onmessage = function(event) {
            const parsedMessage = JSON.parse(event.data);
            const { action, data } = parsedMessage;

            if (action === 'duplicateFiles') {
                console.log("Tabulator Tab: Received duplicateFiles data.");
                // Tabulator's dataTree requires a specific structure with a _children property.
                const tableData = data.map(group => ({
                    ...group,
                    path: `<strong>Group: ${group.hash}</strong>`, // Display hash info in the 'path' column for the parent
                    _children: group.files
                }));
                table.setData(tableData);
            }
        };

        socket.onclose = function(event) {
            console.log("Tabulator Tab: WebSocket connection closed. Reconnecting...");
            setTimeout(connect, 1000);
        };

        socket.onerror = function(error) {
            console.error("Tabulator Tab: WebSocket error: ", error);
            socket.close();
        };
    }

    function dirtySock(action, data) {
        const message = {
            clientId: "dirt-tabulator.page",
            action: action,
            data: data
        };
        if (socket && socket.readyState === WebSocket.OPEN) {
            socket.send(JSON.stringify(message));
        } else {
            console.error("Tabulator Tab: WebSocket is not connected.");
        }
    }

    connect();
});
</script>
